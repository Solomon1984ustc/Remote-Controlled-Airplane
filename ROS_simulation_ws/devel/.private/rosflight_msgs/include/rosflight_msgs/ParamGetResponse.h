// Generated by gencpp from file rosflight_msgs/ParamGetResponse.msg
// DO NOT EDIT!


#ifndef ROSFLIGHT_MSGS_MESSAGE_PARAMGETRESPONSE_H
#define ROSFLIGHT_MSGS_MESSAGE_PARAMGETRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosflight_msgs
{
template <class ContainerAllocator>
struct ParamGetResponse_
{
  typedef ParamGetResponse_<ContainerAllocator> Type;

  ParamGetResponse_()
    : exists(false)
    , value(0.0)  {
    }
  ParamGetResponse_(const ContainerAllocator& _alloc)
    : exists(false)
    , value(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _exists_type;
  _exists_type exists;

   typedef double _value_type;
  _value_type value;





  typedef boost::shared_ptr< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ParamGetResponse_

typedef ::rosflight_msgs::ParamGetResponse_<std::allocator<void> > ParamGetResponse;

typedef boost::shared_ptr< ::rosflight_msgs::ParamGetResponse > ParamGetResponsePtr;
typedef boost::shared_ptr< ::rosflight_msgs::ParamGetResponse const> ParamGetResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosflight_msgs::ParamGetResponse_<ContainerAllocator1> & lhs, const ::rosflight_msgs::ParamGetResponse_<ContainerAllocator2> & rhs)
{
  return lhs.exists == rhs.exists &&
    lhs.value == rhs.value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosflight_msgs::ParamGetResponse_<ContainerAllocator1> & lhs, const ::rosflight_msgs::ParamGetResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosflight_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b9936a8d79e0138dca2aceed732c9049";
  }

  static const char* value(const ::rosflight_msgs::ParamGetResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb9936a8d79e0138dULL;
  static const uint64_t static_value2 = 0xca2aceed732c9049ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosflight_msgs/ParamGetResponse";
  }

  static const char* value(const ::rosflight_msgs::ParamGetResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool exists # whether the request parameter exists\n"
"float64 value # the value of the requested parameter\n"
"\n"
;
  }

  static const char* value(const ::rosflight_msgs::ParamGetResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.exists);
      stream.next(m.value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParamGetResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosflight_msgs::ParamGetResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosflight_msgs::ParamGetResponse_<ContainerAllocator>& v)
  {
    s << indent << "exists: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.exists);
    s << indent << "value: ";
    Printer<double>::stream(s, indent + "  ", v.value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSFLIGHT_MSGS_MESSAGE_PARAMGETRESPONSE_H

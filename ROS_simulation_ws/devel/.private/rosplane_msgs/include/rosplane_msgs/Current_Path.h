// Generated by gencpp from file rosplane_msgs/Current_Path.msg
// DO NOT EDIT!


#ifndef ROSPLANE_MSGS_MESSAGE_CURRENT_PATH_H
#define ROSPLANE_MSGS_MESSAGE_CURRENT_PATH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rosplane_msgs
{
template <class ContainerAllocator>
struct Current_Path_
{
  typedef Current_Path_<ContainerAllocator> Type;

  Current_Path_()
    : path_type(0)
    , Va_d(0.0)
    , r()
    , q()
    , c()
    , rho(0.0)
    , lambda(0)  {
      r.assign(0.0);

      q.assign(0.0);

      c.assign(0.0);
  }
  Current_Path_(const ContainerAllocator& _alloc)
    : path_type(0)
    , Va_d(0.0)
    , r()
    , q()
    , c()
    , rho(0.0)
    , lambda(0)  {
  (void)_alloc;
      r.assign(0.0);

      q.assign(0.0);

      c.assign(0.0);
  }



   typedef uint8_t _path_type_type;
  _path_type_type path_type;

   typedef float _Va_d_type;
  _Va_d_type Va_d;

   typedef boost::array<float, 3>  _r_type;
  _r_type r;

   typedef boost::array<float, 3>  _q_type;
  _q_type q;

   typedef boost::array<float, 3>  _c_type;
  _c_type c;

   typedef float _rho_type;
  _rho_type rho;

   typedef int8_t _lambda_type;
  _lambda_type lambda;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ORBIT_PATH)
  #undef ORBIT_PATH
#endif
#if defined(_WIN32) && defined(LINE_PATH)
  #undef LINE_PATH
#endif
#if defined(_WIN32) && defined(CLOCKWISE)
  #undef CLOCKWISE
#endif
#if defined(_WIN32) && defined(COUNT_CLOCKWISE)
  #undef COUNT_CLOCKWISE
#endif

  enum {
    ORBIT_PATH = 0u,
    LINE_PATH = 1u,
    CLOCKWISE = 1,
    COUNT_CLOCKWISE = -1,
  };


  typedef boost::shared_ptr< ::rosplane_msgs::Current_Path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosplane_msgs::Current_Path_<ContainerAllocator> const> ConstPtr;

}; // struct Current_Path_

typedef ::rosplane_msgs::Current_Path_<std::allocator<void> > Current_Path;

typedef boost::shared_ptr< ::rosplane_msgs::Current_Path > Current_PathPtr;
typedef boost::shared_ptr< ::rosplane_msgs::Current_Path const> Current_PathConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosplane_msgs::Current_Path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosplane_msgs::Current_Path_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rosplane_msgs::Current_Path_<ContainerAllocator1> & lhs, const ::rosplane_msgs::Current_Path_<ContainerAllocator2> & rhs)
{
  return lhs.path_type == rhs.path_type &&
    lhs.Va_d == rhs.Va_d &&
    lhs.r == rhs.r &&
    lhs.q == rhs.q &&
    lhs.c == rhs.c &&
    lhs.rho == rhs.rho &&
    lhs.lambda == rhs.lambda;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rosplane_msgs::Current_Path_<ContainerAllocator1> & lhs, const ::rosplane_msgs::Current_Path_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rosplane_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rosplane_msgs::Current_Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosplane_msgs::Current_Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplane_msgs::Current_Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosplane_msgs::Current_Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplane_msgs::Current_Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosplane_msgs::Current_Path_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosplane_msgs::Current_Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8111c821fdc28e68e300e6788674dca7";
  }

  static const char* value(const ::rosplane_msgs::Current_Path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8111c821fdc28e68ULL;
  static const uint64_t static_value2 = 0xe300e6788674dca7ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosplane_msgs::Current_Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosplane_msgs/Current_Path";
  }

  static const char* value(const ::rosplane_msgs::Current_Path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosplane_msgs::Current_Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Current path output from the path manager, input to path follower\n"
"\n"
"# @warning Va_d have always to be valid,\n"
"# r and q need to be valid if path_type == LINE_PATH\n"
"# c, rho, and, lambda need to be valid if path_type == ORBIT_PATH\n"
"uint8 path_type		# Indicates strait line or orbital path\n"
"float32 Va_d		# Desired airspeed (m/s)\n"
"float32[3] r		# Vector to origin of straight line path (m)\n"
"float32[3] q		# Unit vector, desired direction of travel for line path\n"
"float32[3] c		# Center of orbital path (m)\n"
"float32 rho		# Radius of orbital path (m)\n"
"int8 lambda		# Direction of orbital path (clockwise is 1, counterclockwise is -1)\n"
"\n"
"uint8 ORBIT_PATH = 0\n"
"uint8 LINE_PATH = 1\n"
"\n"
"int8 CLOCKWISE = 1\n"
"int8 COUNT_CLOCKWISE = -1\n"
;
  }

  static const char* value(const ::rosplane_msgs::Current_Path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosplane_msgs::Current_Path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_type);
      stream.next(m.Va_d);
      stream.next(m.r);
      stream.next(m.q);
      stream.next(m.c);
      stream.next(m.rho);
      stream.next(m.lambda);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Current_Path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosplane_msgs::Current_Path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosplane_msgs::Current_Path_<ContainerAllocator>& v)
  {
    s << indent << "path_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.path_type);
    s << indent << "Va_d: ";
    Printer<float>::stream(s, indent + "  ", v.Va_d);
    s << indent << "r[]" << std::endl;
    for (size_t i = 0; i < v.r.size(); ++i)
    {
      s << indent << "  r[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.r[i]);
    }
    s << indent << "q[]" << std::endl;
    for (size_t i = 0; i < v.q.size(); ++i)
    {
      s << indent << "  q[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.q[i]);
    }
    s << indent << "c[]" << std::endl;
    for (size_t i = 0; i < v.c.size(); ++i)
    {
      s << indent << "  c[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.c[i]);
    }
    s << indent << "rho: ";
    Printer<float>::stream(s, indent + "  ", v.rho);
    s << indent << "lambda: ";
    Printer<int8_t>::stream(s, indent + "  ", v.lambda);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSPLANE_MSGS_MESSAGE_CURRENT_PATH_H
